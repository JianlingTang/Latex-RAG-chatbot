[
  {
    "section": "Introduction",
    "text": "% problem statement and the solution is at hand Deep learning has attracted tremendous attention from researchers in fields such as physics, biology, and manufacturing, to name a few . Tools such as neural networks (NNs), dropout, convolutional neural networks (convnets), and others are used extensively. However, these are fields in which representing model uncertainty is of crucial importance . With the recent shift in many of these fields towards the use of Bayesian uncertainty , new needs arise from deep learning tools. % Standard deep learning tools for regression and classification do not capture model uncertainty. In classification, predictive probabilities obtained at the end of the pipeline (the softmax output) are often erroneously interpreted as model confidence. A model can be uncertain in its predictions even with a high softmax output (fig.\\ ). Passing a point estimate of a function (solid line ) through a softmax (solid line ) results in extrapolations with unjustified high confidence for points far from the training data. $x^*$ for example would be classified as class 1 with probability $1$. However, passing the distribution (shaded area ) through a softmax (shaded area ) better reflects classification uncertainty far from the training data. %For the task of regression, or to transfer features from one model to another (such as is often done with word embeddings), we have with point estimates alone. %, marked with a red dashed line %To see why the softmax output is not sufficient to determine model accuracy, we inspect the softmax input of an idealised binary classification problem, sketched in fig.\\ . The corresponding softmax output is sketched in fig.\\ . %In this example, the observed data points are bounded within the dashed grey lines. Ignoring model uncertainty, the model will predict class 0 with high probability to points with $x$ value smaller than $-1$, predict class 1 with high probability for points larger than $1$, and predict probability 0.5 for points lying near the origin (shown with a bold black line). %Note that even for points far from the data the mean is high and the model will predict class 1 with high softmax output value. % %Taking model uncertainty into account, on the other hand, we see that the model is extremely uncertain about all inputs $x$ larger than $3$, such as $x^*$ marked with a dashed red line. This is depicted by the large uncertainty envelope. The model predicts that softmax inputs in this region can take $y$ values as low as $-5$ with very high probability. Sampling from this region will return near-one probabilities for class 1 as well as near-one probabilities for class 0 (fig.\\ ). %Even though the predictive mean is high, taking uncertainty into account we see that the model is uncertain about any predictions in this region, and would ideally ask a human to label such inputs instead of returning an incorrect answer with high confidence. % why is this important Model uncertainty is indispensable for the deep learning practitioner as well. With model confidence at hand we can treat uncertain inputs and special cases explicitly. For example, in the case of classification, a model might return a result with high uncertainty. In this case we might decide to pass the input to a human for classification. This can happen in a post office, sorting letters according to their zip code, or in a nuclear power plant with a system responsible for critical infrastructure . %Alternatively, one can use a weak and fast model to perform classification, and use a more elaborate but slower model only for inputs on which the weak model is uncertain. Uncertainty is important in reinforcement learning (RL) as well . With uncertainty information an agent can decide when to exploit and when to explore its environment. Recent advances in RL have made use of NNs for Q-value function approximation. These are functions that estimate the quality of different actions an agent can take. Epsilon greedy search is often used where the agent selects its best action with some probability and explores otherwise. With uncertainty estimates over the agent's Q-value function, techniques such as Thompson sampling can be used to learn much faster. [t] [b]{0.49} [width=, trim=2mm 3mm 2mm 2mm, clip]{figs/exp2/sketch_classification} )} % [b]{0.49} [width=, trim=2mm 3mm 2mm 2mm, clip]{figs/exp2/sketch_classification_prob} )} Training data is given between the dashed grey lines. Function point estimate is shown with a solid line. Function uncertainty is shown with a shaded area. Marked with a dashed red line is a point $x^*$ far from the training data. Ignoring function uncertainty, point $x^*$ is classified as class 1 with probability $1$.} % what do we do Bayesian probability theory offers us mathematically grounded tools to reason about model uncertainty, but these usually come with a prohibitive computational cost. It is perhaps surprising then that it is possible to cast recent deep learning tools as Bayesian models -- without changing either the models or the optimisation. We show that the use of dropout (and its variants) in NNs can be interpreted as a Bayesian approximation of a well known probabilistic model: the Gaussian process (GP) . Dropout is used in many models in deep learning as a way to avoid over-fitting , and our interpretation suggests that dropout approximately integrates over the models' weights. We develop tools for representing model uncertainty of existing dropout NNs -- extracting information that has been thrown away so far. This mitigates the problem of representing model uncertainty in deep learning without sacrificing either computational complexity or test accuracy. %Model uncertainty is often evaluated in exploratory research, studying the properties of the estimated model confidence in different tasks. In this paper we give a complete theoretical treatment of the link between Gaussian processes and dropout, and develop the tools necessary to represent uncertainty in deep learning. We perform an extensive exploratory assessment of the properties of the uncertainty obtained from dropout NNs and convnets on the tasks of regression and classification. We compare the uncertainty obtained from different model architectures and non-linearities in regression, and show that model uncertainty is indispensable for classification tasks, using MNIST as a concrete example. We then show a considerable improvement in predictive log-likelihood and RMSE compared to existing state-of-the-art methods. Lastly we give a quantitative assessment of model uncertainty in the setting of reinforcement learning, on a practical task similar to that used in deep reinforcement learning ..}",
    "equation": ""
  },
  {
    "section": "Related Research",
    "text": "% existing reseach and how it relates to us It has long been known that infinitely wide (single hidden layer) NNs with distributions placed over their weights converge to Gaussian processes . This known relation is through a limit argument that does not allow us to translate properties from the Gaussian process to finite NNs easily. Finite NNs with distributions placed over the weights have been studied extensively as . These offer robustness to over-fitting as well, but with challenging inference and additional computational costs. Variational inference has been applied to these models, but with limited success . Recent advances in variational inference introduced new techniques into the field such as variational inference and variational inference {blei2012variational,kingma2013auto, rezende2014stochastic,titsias2014doubly, hoffman2013stochastic}. These have been used to obtain new approximations for Bayesian neural networks that perform as well as dropout . However these models come with a prohibitive computational cost. To represent uncertainty, the number of parameters in these models is doubled for the same network size. Further, they require more time to converge and do not improve on existing techniques. Given that good uncertainty estimates can be cheaply obtained from common dropout models, this might result in unnecessary additional computation. An alternative approach to variational inference makes use of expectation propagation and has improved considerably in RMSE and uncertainty estimation on VI approaches such as . In the results section we compare dropout to these approaches and show a significant improvement in both RMSE and uncertainty estimation.",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "We show that a neural network with arbitrary depth and non-linearities, with dropout applied before every weight layer, is mathematically equivalent to an approximation to the probabilistic deep Gaussian process (marginalised over its covariance function parameters). We would like to stress that no simplifying assumptions are made on the use of dropout in the literature, and that the results derived are applicable to any network architecture that makes use of dropout exactly as it appears in practical applications. Furthermore, our results carry to other variants of dropout as well (such as drop-connect , multiplicative Gaussian noise , etc.). We show that the dropout objective, in effect, minimises the Kullback--Leibler divergence between an approximate distribution and the posterior of a deep Gaussian process (marginalised over its finite rank covariance function parameters). Due to space constraints we refer the reader to the appendix for an in depth review of dropout, Gaussian processes, and variational inference (section 2), as well as the main derivation for dropout and its variations (section 3). The results are summarised here and in the next section we obtain uncertainty estimates for dropout NNs. Let $$ be the output of a NN model with $L$ layers and a loss function $E(,)$ such as the softmax loss or the Euclidean loss (square loss). We denote by $_i$ the NN's weight matrices of dimensions $K_i K_{i-1}$, and by $_i$ the bias vectors of dimensions $K_i$ for each layer $i = 1, ..., L$. We denote by $_i$ the observed output corresponding to input $_i$ for $1 i N$ data points, and the input and output sets as $, $. During NN optimisation a regularisation term is often added. We often use $L_2$ regularisation weighted by some weight decay $$, resulting in a minimisation objective (often referred to as cost),",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "} := {N} ^N E(_i,_i) + ^L ( ||_i||^2_2 + ||_i||^2_2 )."
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "With dropout, we sample binary variables for every input point and for every network unit in each layer (apart from the last one). Each binary variable takes value 1 with probability $p_i$ for layer $i$. A unit is dropped (i.e.\\ its value is set to zero) for a given input if its corresponding binary variable takes value 0. We use the same values in the backward pass propagating the derivatives to the parameters. In comparison to the non-probabilistic NN, the deep Gaussian process % is a powerful tool in statistics that allows us to model distributions over functions. Assume we are given a covariance function of the form $$(, ) = p() p(b) (^T + b) (^T + b) b$$ with some element-wise non-linearity $()$ and distributions $p(), p(b)$. %It is straightforward to show that $(, )$ is a valid PSD covariance function (it is an example of a marginalised covariance function ). In sections 3 and 4 in the appendix we show that a deep Gaussian process with $L$ layers and covariance function $(, )$ can be approximated by placing a variational distribution over each component of a spectral decomposition of the GPs' covariance functions. This spectral decomposition maps each layer of the deep GP to a layer of explicitly represented hidden units, as will be briefly explained next. Let $_i$ be a (now random) matrix of dimensions $K_i K_{i-1}$ for each layer $i$, and write $= \\{ _i \\}_{i=1}^L$. A priori, we let each row of $_i$ distribute according to the $p()$ above. In addition, assume vectors $_i$ of dimensions $K_i$ for each GP layer. The predictive probability of the deep GP model (integrated w.r.t.\\ the finite rank covariance function parameters $$) given some precision parameter $> 0$ can be parametrised as",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "p(| , , ) &= p(| , ) p(| , ) \\\\ %p(_d = 1 | , ) &= ( (_{d}(, )) / (_{d'}(, ))) \\\\ p(| , ) &= ( ; (, ), ^{-1} _D ) \\\\ (, = \\{_1, ..., &_L\\} ) \\\\ & = {K_L}} _L ( ... {K_1}} _2 ( _1 + _1 ) ... )"
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "% The posterior distribution $p(| , )$ in eq.\\ is intractable. We use $q()$, a distribution over matrices whose columns are randomly set to zero, to approximate the intractable posterior. We define $q()$ as:",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "%&= \\{ _i \\}_{i=1}^L \\\\ _i &= _i ([]_{j=1}^{K_i}) \\\\ &(p_i) i = 1, ..., L, ~ j = 1, ..., K_{i-1}"
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "given some probabilities $p_i$ and matrices $_i$ as variational parameters. %The $()$ operator maps vectors to diagonal matrices whose diagonals are the elements of the vectors. The binary variable $ = 0$ corresponds then to unit $j$ in layer $i-1$ being dropped out as an input to layer $i$. The variational distribution $q()$ is highly multi-modal, inducing strong joint correlations over the rows of the matrices $_i$ (which correspond to the frequencies in the sparse spectrum GP approximation). We minimise the KL divergence between the approximate posterior $q()$ above and the posterior of the full deep GP, $p(| , )$. This KL is our minimisation objective",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "- q() p(|,) + (q() || p())."
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "We rewrite the first term as a sum $$- ^N q() p(_n|_n,) $$ and approximate each term in the sum by Monte Carlo integration with a single sample $_n q()$ %(section 3.4 in the appendix) to get an unbiased estimate $- p(_n | _n, _n)$. We further approximate the second term in eq.\\ and obtain $ ^L ( {2} ||_i||^2_2 + {2} ||_i||^2_2 )$ with prior length-scale $l$ (see section 4.2 in the appendix). Given model precision $$ we scale the result by the constant $1/N$ to obtain the objective:",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "} &{N} ^N _n) }{}\\\\ &+ ^L ( {2 N} ||_i||^2_2 + {2 N} ||_i||^2_2 )."
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "Setting $$E(_n, (_n, _n)) = - p(_n | _n, _n) / $$ we recover eq.\\ for an appropriate setting of the precision hyper-parameter $$ and length-scale $l$. The sampled $_n$ result in realisations from the Bernoulli distribution $^n$ equivalent to the binary variables in the dropout case. %We show that a neural network (NN) with arbitrary depth and non-linearities, with dropout applied before every weight layer, is mathematically equivalent to an approximation to the probabilistic deep Gaussian process model . We would like to stress that no simplifying assumptions are made on the use of dropout in the literature, and that the results derived are applicable to any network architecture that makes use of dropout exactly as it appears in practical applications. We show that the dropout objective, in effect, minimises the Kullback--Leibler divergence between an approximate model and the deep Gaussian process. %Due to space constraints we refer the reader to the appendix for an in depth review of dropout, Gaussian processes, and variational inference (section 2), as well as the main derivation (sections 3). The results are summarised here and in the next section we obtain uncertainty estimates for dropout NNs. %We start by defining dropout in NNs. We denote by $E$ a loss function such as the softmax loss or the Euclidean loss. We denote by $_i$ weight matrices of dimensions $K_i K_{i-1}$, and by $_i$ the bias vectors of dimensions $K_i$ for each layer $i = 1, ..., L$. We denote by $$ the outputs of a NN model and by $$ the observed outputs corresponding to inputs $$. %During NN optimisation, the loss term is scaled by the learning rate $$ and a regularisation term is added. %We often use $L_2$ regularisation weighted by some weight decay $$, resulting in a minimisation objective (often referred to as cost), %",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "%} := E(,) + ^L ( ||_i||^2_2 + ||_i||^2_2 ). %"
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "%With dropout, we sample binary variables for every input point and for every network unit in each layer. Each binary variable takes value 1 with probability $p_i$ for layer $i$. A unit is dropped (i.e.\\ its value is set to zero) for a given input if its corresponding binary variable takes value 0. We use the same binary variable values in the backward pass propagating the derivatives to the parameters. %The deep Gaussian process is a powerful tool in statistics that allows us to model distributions over functions. %Assume we are given a covariance function of the form $(, ) = p() p(b) (^T + b) (^T + b) b$ with some element-wise non-linearity $()$ and distributions $p(), p(b)$. It is straightforward to show that $(, )$ is a valid PSD covariance function -- it is an example of a marginalised covariance function . %In section 3 in the appendix we show that a deep Gaussian process with $L$ layers and covariance function $(, )$ can be approximated using the following parametric probabilistic model. %Let $_i$ be a $K_{i-1}$ dimensional random vector for each layer $i$. %Write $_i = _i (_i)$ with matrices $_i$ of dimensions $K_i K_{i-1}$ and let $= \\{ _i \\}_{i=1}^L$. %$_i$ are treated as variational parameters. %The variational distribution, $q()$, is defined by %",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "% &(p_i) i = 1, ..., L, ~ j = 1, ..., K_{i-1} %"
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "%given some probabilities $p_i$. In effect, $q()$ is a distribution over matrices whose columns can randomly be set to zero. %The binary variable $ = 0$ indicates that unit $j$ in layer $i-1$ is dropped out as an input to layer $i$. %Given bias vectors $_i$ of dimensions $K_i$ for each layer, the approximate model $q(| )$ is defined as %",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "%q(| ) &= p(| , ) q() \\\\ %p(| , ) &= ( ; (, _1, ..., _L), ^{-1} _D ) \\\\ %(, _1, ..., _L) &= {K_L}} _L ( ... {K_1}} _2 ( _1 + _1 ) ... ) %"
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "%for some precision parameter $> 0$ and some element-wise non-linearity $()$. %This approximate model can be derived by placing an approximating variational distribution over each component of a spectral decomposition of the GPs' covariance functions. This spectral decomposition maps each layer of the deep GP to a layer of explicitly represented hidden units (section 3.1 in the appendix). %In variational inference we minimise the KL divergence between the approximate model $q()$ above and the posterior of the full deep GP -- $p(| )$. %The minimisation objective is obtained from this KL divergence by Monte Carlo integration over $$ with a single sample (section 3.4 in the appendix): %",
    "equation": ""
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "",
    "equation": "%} &E(,) + ^L ( {2} ||_i||^2_2 + {2} ||_i||^2_2 ) %"
  },
  {
    "section": "Dropout as a Bayesian Approximation",
    "text": "%with $E(,) = - p(| , )$ and $$ realisations from the Bernoulli distribution. %This is identical to eq.\\ for an appropriate setting of precision hyper-parameter $$ and scale parameter $$.",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "We next derive results extending on the above showing that model uncertainty can be obtained from dropout NN models. Following section 2.3 in the appendix, our approximate predictive distribution is given by",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "",
    "equation": "q(^* | ^*) = p(^* | ^*, ) q()"
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "where $= \\{ \\}_{i=1}^{L}$ is our set of random variables for a model with $L$ layers. %For a single hidden layer this would be evaluated as %",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "",
    "equation": "%q(^* | ^*) &= ( ^*; ^*(^*, _1, _2), ^{-1} _D ) (_1) (_2) _1 _2 %"
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "%with $^*(^*, _1, _2) = {K}} (_2 _2) ((_1 _1) ^* + _1)$. %Presumably this equation has been known to the authors of , although it has not appeared in the literature before. We will perform moment-matching and estimate the first two moments of the predictive distribution empirically. More specifically, we sample $T$ sets of vectors of realisations from the Bernoulli distribution $\\{ ^t, ..., ^t \\}_{t=1}^T$ with $^t_{i} = [^t_{i,j}]_{j=1}^{K_i}$, % and probabilities $\\{p_1, ..., p_L\\}$, giving $\\{ ^t, ..., ^t \\}_{t=1}^T$. We estimate",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "",
    "equation": "_{q(^* | ^*)} (^*) {T} ^T ^*(^*, ^t, ..., ^t)"
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "following proposition C in the appendix. We refer to this Monte Carlo estimate as . In practice this is equivalent to performing $T$ stochastic forward passes through the network and averaging the results. This result has been presented in the literature before as model averaging. We have given a new derivation for this result which allows us to derive mathematically grounded uncertainty estimates as well. [][section 7.5]{srivastava2014dropout} have reasoned empirically that MC dropout can be approximated by averaging the weights of the network (multiplying each $_i$ by $p_i$ at test time, referred to as ). % We estimate the second raw moment in the same way:",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "",
    "equation": "&_{q(^* | ^*)} ( (^*)^T(^*) ) ^{-1} _D \\\\ &+ {T} ^T ^*(^*, ^t, ..., ^t)^T ^*(^*, ^t, ..., ^t)"
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "following proposition D in the appendix. To obtain the model's predictive variance we have:",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "",
    "equation": "& ( ^* ) ^{-1} _D \\\\ &+ {T} ^T ^*(^*, ^t, ..., ^t)^T ^*(^*, ^t, ..., ^t) \\\\ &- _{q(^* | ^*)} (^*)^T _{q(^* | ^*)} (^*) %&- %( {T} ^T ^*(^*, ^t, ..., ^t) )^T %( {T} ^T ^*(^*, ^t, ..., ^t) )"
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "which equals the sample variance of $T$ stochastic forward passes through the NN plus the inverse model precision. Note that $^*$ is a row vector thus the sum is over the . Given the weight-decay $$ (and our prior length-scale $l$) we can find the model precision from the identity",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "",
    "equation": "= {2 N }."
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "We can estimate our predictive log-likelihood by Monte Carlo integration of eq.\\ . This is an estimate of how well the model fits the mean and uncertainty (see section 4.4 in the appendix). For regression this is given by: {}",
    "equation": ""
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "",
    "equation": "p(^* | ^*, , ) &( -{2} || - _t ||^2 ) \\\\ &- T - {2} 2 - {2} ^{-1}"
  },
  {
    "section": "Obtaining Model Uncertainty",
    "text": "with a log-sum-exp of $T$ terms and $_t$ stochastic forward passes through the network. Our predictive distribution $q(^* | ^*)$ is expected to be highly multi-modal, and the above approximations only give a glimpse into its properties. This is because the approximating variational distribution placed on each weight matrix column is bi-modal, and as a result the joint distribution over each layer's weights is multi-modal (section 3.2 in the appendix). Note that the dropout NN model itself is not changed. To estimate the predictive mean and predictive uncertainty we simply collect the results of stochastic forward passes through the model. As a result, this information can be used with existing NN models trained with dropout. Furthermore, the forward passes can be done concurrently, resulting in constant running time identical to that of standard dropout. %Alternatively, setting a mini-batch with the same input multiple times yields multiple predictions to average for free. [t!] [b]{0.5} [width=]{figs/exp1/co2_standard_dropout_relu.png} % [b]{0.5} [width=]{figs/exp1/co2_GP_SE.png} [b]{0.5} [width=]{figs/exp1/co2_MC_dropout_relu.png} % [b]{0.5} [width=]{figs/exp1/co2_MC_dropout_01_tanh.png} In red is the observed function (left of the dashed blue line); in blue is the predictive mean plus/minus two standard deviations (8 for fig.\\ ). Different shades of blue represent half a standard deviation. Marked with a dashed red line is a point far away from the data: standard dropout confidently predicts an insensible value for the point; the other models predict insensible values as well but with the additional information that the models are uncertain about their predictions.}",
    "equation": ""
  },
  {
    "section": "Experiments",
    "text": "%Model uncertainty is often evaluated in exploratory research, studying the properties of the estimated model confidence on different tasks. We next perform an extensive assessment of the properties of the uncertainty estimates obtained from dropout NNs and convnets on the tasks of regression and classification. We compare the uncertainty obtained from different model architectures and non-linearities, both on tasks of extrapolation, and show that model uncertainty is important for classification tasks using MNIST as an example. We then show that using dropout's uncertainty we can obtain a considerable improvement in predictive log-likelihood and RMSE compared to existing state-of-the-art methods. We finish with an example use of the model's uncertainty in a Bayesian pipeline. We give a quantitative assessment of the model's performance in the setting of reinforcement learning on a task similar to that used in deep reinforcement learning . Using the results from the previous section, we begin by qualitatively evaluating the dropout NN uncertainty on two regression tasks. We use two regression datasets and model scalar functions which are easy to visualise. These are tasks one would often come across in real-world data analysis. We use a subset of the atmospheric CO$_2$ concentrations dataset derived from in situ air samples collected at Mauna Loa Observatory, Hawaii (referred to as ) to evaluate model extrapolation. In the appendix (section D.1) we give further results on a second dataset, the reconstructed solar irradiance dataset , to assess model interpolation. The datasets are fairly small, with each dataset consisting of about 200 data points. We centred and normalised both datasets. %For the task of classification we evaluate the LeNet convolutional neural network model on the MNIST dataset . We show that softmax output probabilities cannot fully capture model uncertainty, and assess model uncertainty in realistic classification cases. Further, we plot a histogram of the samples and assess the moment matching simplifying assumptions above. We trained several models on the CO$_2$ dataset. We use NNs with either 4 or 5 hidden layers and 1024 hidden units. We use either ReLU non-linearities or TanH non-linearities in each network, and use dropout probabilities of either $0.1$ or $0.2$. Exact experiment set-up is given in section E.1 in the appendix. Extrapolation results are shown in figure . The model is trained on the training data (left of the dashed blue line), and tested on the entire dataset. Fig.\\ shows the results for standard dropout (i.e.\\ with weight averaging and without assessing model uncertainty) for the 5 layer ReLU model. Fig.\\ shows the results obtained from a Gaussian process with a squared exponential covariance function for comparison. Fig.\\ shows the results of the same network as in fig.\\ , but with MC dropout used to evaluate the predictive mean and uncertainty for the training and test sets. Lastly, fig.\\ shows the same using the TanH network with 5 layers (plotted with 8 times the standard deviation for visualisation purposes). The shades of blue represent model uncertainty: each colour gradient represents half a standard deviation (in total, predictive mean plus/minus 2 standard deviations are shown, representing 95\\% confidence). Not plotted are the models with 4 layers as these converge to the same results. Extrapolating the observed data, none of the models can capture the periodicity (although with a suitable covariance function the GP will capture it well). The standard dropout NN model (fig.\\ ) predicts value 0 for point $x^*$ (marked with a dashed red line) with high confidence, even though it is clearly not a sensible prediction. The GP model represents this by increasing its predictive uncertainty -- in effect declaring that the predictive value might be 0 but the model is uncertain. This behaviour is captured in MC dropout as well. Even though the models in figures have an incorrect predictive mean, the increased standard deviation expresses the models' uncertainty about the point. [b!] {} [width=, height=1.75cm]{figs/exp1/co2_MC_dropout_relu_T10.png} % Note that the uncertainty is increasing far from the data for the ReLU model, whereas for the TanH model it stays bounded. [t] [b]{0.5} [width=, trim=0mm 0mm 0mm 0mm, clip]{figs/exp2/MC_dropout_mnist_ip3} [width=0.955, trim=7mm 7mm 0mm 4mm, clip]{figs/exp2/MC_dropout_mnist_x_axis} scatter} % [b]{0.5} [width=, trim=0mm 0mm 0mm 0mm, clip]{figs/exp2/MC_dropout_mnist_prob} [width=0.955, trim=7mm 7mm 0mm 4mm, clip]{figs/exp2/MC_dropout_mnist_x_axis} scatter} On the $X$ axis is a rotated image of the digit 1. The input is classified as digit 5 for images 6-7, even though model uncertainty is extremly large (best viewed in colour).} This is not surprising, as dropout's uncertainty draws its properties from the GP in which different covariance functions correspond to different uncertainty estimates. ReLU and TanH approximate different GP covariance functions (section 3.1 in the appendix) and TanH saturates whereas ReLU does not. For the TanH model we assessed the uncertainty using both dropout probability $0.1$ and dropout probability $0.2$. Models initialised with dropout probability $0.1$ initially exhibit smaller uncertainty than the ones initialised with dropout probability $0.2$, but towards the end of the optimisation when the model has converged the uncertainty is almost indistinguishable. It seems that the moments of the dropout models converge to the moments of the approximated GP model -- its mean and uncertainty. It is worth mentioning that we attempted to fit the data with models with a smaller number of layers unsuccessfully. The number of forward iterations used to estimate the uncertainty ($T$) was $1000$ for drawing purposes. A much smaller numbers can be used to get a reasonable estimation to the predictive mean and uncertainty (see fig.\\ for example with $T=10$). To assess model classification confidence in a realistic example we test a convolutional neural network trained on the full MNIST dataset . We trained the LeNet convolutional neural network model with dropout applied before the last fully connected inner-product layer (the usual way dropout is used in convnets). We used dropout probability of $0.5$. We trained the model for $10^6$ iterations with the same learning rate policy as before with $=0.0001$ and $p=0.75$. We used Caffe reference implementation for this experiment. We evaluated the trained model on a continuously rotated image of the digit 1 (shown on the $X$ axis of fig.\\ ). We scatter 100 stochastic forward passes of the softmax input (the output from the last fully connected layer, fig.\\ ), as well as of the softmax output for each of the top classes (fig.\\ ). For the 12 images, the model predicts classes [1 1 1 1 1 5 5 7 7 7 7 7]. {$$} [t!] % {@{}l@{}l@{}l@{}r@{}r@{}r@{}r@{}r@{}r @{}} {c}{} & {c}{Avg. Test RMSE and Std. Errors} & {c}{Avg. Test LL and Std. Errors} \\\\ & $N$ & $Q$ & {c}{} & {c}{} & {c}{} & {c}{} & {c}{} & {c}{} \\\\ Boston Housing & 506 & 13 & 4.32 0.29 & 3.01 0.18 & & -2.90 0.07 & -2.57 0.09 & \\\\ Concrete Strength & 1,030 & 8 & 7.19 0.12 & 5.67 0.09 & & -3.39 0.02 & -3.16 0.02 & \\\\ Energy Efficiency & 768 & 8 & 2.65 0.08 & 1.80 0.05 & & -2.39 0.03 & -2.04 0.02 & \\\\ Kin8nm & 8,192 & 8 & & & & 0.90 0.01 & 0.90 0.01 & \\\\ Naval Propulsion & 11,934 & 16 & & & & 3.73 0.12 & 3.73 0.01 & \\\\ Power Plant & 9,568 & 4 & 4.33 0.04 & 4.12 0.03 & & -2.89 0.01 & -2.84 0.01 & \\\\ Protein Structure & 45,730 & 9 & 4.84 0.03 & 4.73 0.01 & & -2.99 0.01 & -2.97 0.00 & \\\\ Wine Quality Red & 1,599 & 11 & 0.65 0.01 & 0.64 0.01 & & -0.98 0.01 & -0.97 0.01 & \\\\ Yacht Hydrodynamics & 308 & 6 & 6.89 0.67 & & 1.11 0.09 & -3.43 0.16 & -1.63 0.02 & \\\\ Year Prediction MSD & 515,345 & 90 & 9.034 NA & 8.879 NA & & -3.622 NA & -3.603 NA & \\\\ for a popular variational inference method (VI, ), Probabilistic back-propagation (PBP, ), and dropout uncertainty (Dropout). Dataset size ($N$) and input dimensionality ($Q$) are also given.} % The plots show the softmax input value and softmax output value for the 3 digits with the largest values for each corresponding input. When the softmax input for a class is larger than that of all other classes (class 1 for the first 5 images, class 5 for the next 2 images, and class 7 for the rest in fig ), the model predicts the corresponding class. Looking at the softmax input values, if the uncertainty envelope of a class is far from that of other classes' (for example the left most image) then the input is classified with high confidence. On the other hand, if the uncertainty envelope intersects that of other classes (such as in the case of the middle input image), then even though the softmax output can be arbitrarily high (as far as 1 if the mean is far from the means of the other classes), the softmax output uncertainty can be as large as the entire space. This signifies the model's uncertainty in its softmax output value -- i.e.\\ in the prediction. In this scenario it would not be reasonable to use probit to return class 5 for the middle image when its uncertainty is so high. One would expect the model to ask an external annotator for a label for this input. Model uncertainty in such cases can be quantified by looking at the entropy or variation ratios of the model prediction. %Compared to the regression case where predictive uncertainty can be captured with output standard deviation, in classification tasks we might use entropy or variation ratios instead. %To use variation ratios we would sample from the softmax probabilities at the end of each stochastic forward pass to get a label for the input. Collecting a set of labels from multiple stochastic forward passes on the same input we can find the mode of the distribution. The variation ratio is then a measure of dispersion -- how ``spread'' the distribution is around the mode. If most labels agree with the mode, the model is certain about the output. This happens when both the mean of the softmax output is high, and the envelope around it is small. Large dispersion indicates model uncertainty. This happens when either the softmax mean is low (e.g.\\ two classes with probabilities 0.5), or when the envelope is large (so different classes will have high probability at different stochastic passes through the network). %Note that the histogram shown in fig.\\ is fairly uni-modal, justifying the moment matching suggested in the previous section. This does not need to hold in general though as we only used a single dropout layer in this model. %These insights are of use to data science research, using dropout NN models for data analysis. %It is interesting to note that the model becomes very confident about the misclassified 7 labels. %This is due to the large distance between the softmax input and the other %We further assessed the precision recall trade off of standard dropout and MC dropout. %[explain what is precision and recall, and significance]. We assessed the performance on cifar 10 (as mnist seems to give similar performance for either). [copy network description over here from exp3, used 100 samples]. MC dropout in cifar works better [expand]. %Have a look at whther the uncertainty is calibrated: should not be because it is gp approx (nominal coverage, covarage probability -> how much of the data falls within the bound) % Predictive log-likelihood captures how well a model fits the data, with larger values indicating better model fit. Uncertainty quality can be determined from this quantity as well (see section 4.4 in the appendix). We replicate the experiment set-up in and compare the RMSE and predictive log-likelihood of dropout (referred to as ``Dropout'' in the experiments) to that of Probabilistic Back-propagation (referred to as ``PBP'', ) and to a popular variational inference technique in Bayesian NNs (referred to as ``VI'', ). The aim of this experiment is to compare the uncertainty quality obtained from a application of dropout in NNs to that of specialised methods developed to capture uncertainty. Following our Bayesian interpretation of dropout (eq.\\ ) we need to define a prior length-scale, and find an optimal model precision parameter $$ which will allow us to evaluate the predictive log-likelihood (eq.\\ ). Similarly to we use Bayesian optimisation (BO, ) over validation log-likelihood to find optimal $$, and set the prior length-scale to $10^{-2}$ for most datasets based on the range of the data. Note that this is a standard dropout NN, where the prior length-scale $l$ and model precision $$ are simply used to define the model's weight decay through eq.\\ . %* Pbp does not need hyperparameter tuning so no BO %* split the original training data into 80\\% training and 20\\% validation and optimized performance on the validation set. After that retrained using the original training set with the selected hyperparameters. We used dropout with probabilities $0.05$ and $0.005$ since the network size is very small (with 50 units following ) and the datasets are fairly small as well. The BO runs used 40 iterations following the original setup, but after finding the optimal parameter values we used 10x more iterations, as dropout takes longer to converge. Even though the model doesn't converge within 40 iterations, it gives BO a good indication of whether a parameter is good or not. Finally, we used mini-batches of size 32 and the Adam optimiser . % have observed that methods such as Adam, RMSprop or Adadelta results in the same performance as tuning the learning rates optimally with BO (which they did for VI). Further details about the various datasets are given in . The results are shown in table [October 2016]: Note that in an earlier version of this paper our reported dropout standard error was erroneously scaled-up by a factor of 4.5 (i.e.\\ for Boston RMSE we reported standard error 0.85 instead of 0.19 for example).} . Dropout significantly outperforms all other models both in terms of RMSE as well as test log-likelihood on all datasets apart from Yacht, for which PBP obtains better RMSE. All experiments were averaged on 20 random splits of the data (apart from Protein for which only 5 splits were used and Year for which one split was used). The median for most datasets gives much better performance than the mean. For example, on the Boston Housing dataset dropout achieves median RMSE of 2.68 with an IQR interval of [2.45, 3.35] and predictive log-likelihood median of -2.34 with IQR [-2.54, -2.29]. In the Concrete Strength dataset dropout achieves median RMSE of 5.15. To implement the model we used Keras , an open source deep learning package based on Theano . In BO for VI seems to require a considerable amount of additional time compared to PBP. However our model's running time (including BO) is comparable to PBP's Theano implementation{ [October 2016]: In the results above we attempted to match PBP's run time (hence used only 10x more epochs compared to PBP's 40 epochs). Experimenting with 100x more epochs compared to PBP (10x more epochs compared to the results in table ) gives a considerable improvement both in terms of test RMSE as well as test log-likelihood over the results in table . We further assessed a model with two hidden layers instead of one (using the same number of units for the second layer). Both experiments are shown in table at the end of this document. }. On Naval Propulsion for example our model takes 276 seconds on average per split (start-to-finish, divided by the number of splits). With the optimal parameters BO found, model training took 95 seconds. This is in comparison to PBP's 220 seconds. For Kin8nm our model requires 188 seconds on average including BO, 65 seconds without, compared to PBP's 156 seconds. %Finally, for Cycle Power Plant our model requires 251 seconds including BO, 76 without, compared to PBP's in 176 seconds. %average running time for the BO methods: count the time taken to find the hypers with BO and then train the method with the hypers found by BO. Then divide by 20. [b!] {0.5} [width=]{figs/exp3/rl_screenshot} ~~~ {0.5} [width=]{figs/exp3/rl_plot.png} obtained by both epsilon greedy (in green) and our approach (in blue), as a function of the number of batches.} % Dropout's RMSE in table is given by averaging stochastic forward passes through the network following eq.\\ (MC dropout). We observed an improvement using this estimate compared to the standard dropout weight averaging, and also compared to much smaller dropout probabilities (near zero). For the Boston Housing dataset for example, repeating the same experiment with dropout probability 0 results in RMSE of 3.07 and predictive log-likelihood of -2.59. This demonstrates that dropout significantly affects the predictive log-likelihood and RMSE, even though the dropout probability is fairly small. We used dropout following the same way the method would be used in current research -- without adapting model structure. This is to demonstrate the results that could be obtained from existing models when evaluated with MC dropout. Experimenting with different network architectures we expect the method to give even better uncertainty estimates. In reinforcement learning an agent receives various rewards from different states, and its aim is to maximise its expected reward over time. The agent tries to learn to avoid transitioning into states with low rewards, and to pick actions that lead to better states instead. Uncertainty is of great importance in this task -- with uncertainty information an agent can decide when to exploit rewards it knows of, and when to explore its environment. Recent advances in RL have made use of NNs to estimate agents' Q-value functions (referred to as Q-networks), a function that estimates the quality of different actions an agent can take at different states. This has led to impressive results on Atari game simulations, where agents superseded human performance on a variety of games . Epsilon greedy search was used in this setting, where the agent selects the best action following its current Q-function estimation with some probability, and explores otherwise. With our uncertainty estimates given by a dropout Q-network we can use techniques such as Thompson sampling to converge faster than epsilon greedy while avoiding over-fitting. We use code by that replicated the results by with a simpler 2D setting. We simulate an agent in a 2D world with 9 eyes pointing in different angles ahead (depicted in fig.\\ ). Each eye can sense a single pixel intensity of 3 colours. The agent navigates by using one of 5 actions controlling two motors at its base. An action turns the motors at different angles and different speeds. The environment consists of red circles which give the agent a positive reward for reaching, and green circles which result in a negative reward. The agent is further rewarded for not looking at (white) walls, and for walking in a straight line. We trained the original model, and an additional model with dropout with probability 0.1 applied before the every weight layer. Note that both agents use the same network structure in this experiment for comparison purposes. In a real world scenario using dropout we would use a larger model (as the original model was intentially selected to be small to avoid over-fitting). To make use of the dropout Q-network's uncertainty estimates, we use Thompson sampling instead of epsilon greedy. In effect this means that we perform a single stochastic forward pass through the network every time we need to take an action. In replay, we perform a single stochastic forward pass and then back-propagate with the sampled Bernoulli random variables. Exact experiment set-up is given in section E.2 in the appendix. In fig.\\ we show a of the average reward obtained by both the original implementation (in green) and our approach (in blue), as a function of the number of batches. Not plotted is the burn-in intervals of 25 batches (random moves). Thompson sampling gets reward larger than $1$ within 25 batches from burn-in. Epsilon greedy takes 175 batches to achieve the same performance. It is interesting to note that our approach seems to stop improving after 1K batches. This is because we are still sampling random moves, whereas epsilon greedy only exploits at this stage. %",
    "equation": ""
  },
  {
    "section": "Conclusions and Future Research",
    "text": "We have built a probabilistic interpretation of dropout which allowed us to obtain model uncertainty out of existing deep learning models. We have studied the properties of this uncertainty in detail, and demonstrated possible applications, interleaving Bayesian models and deep learning models together. This extends on initial research studying dropout from the Bayesian perspective . Bernoulli dropout is only one example of a regularisation technique corresponding to an approximate variational distribution which results in uncertainty estimates. Other variants of dropout %(such as drop-connect , multiplicative Gaussian noise , hashed neural networks , etc.) follow our interpretation as well and correspond to alternative approximating distributions. These would result in different uncertainty estimates, trading-off uncertainty quality with computational complexity. We explore these in follow-up work. Furthermore, each GP covariance function has a one-to-one correspondence with the combination of both NN non-linearities and weight regularisation. This suggests techniques to select appropriate NN structure and regularisation based on our a priori assumptions about the data. For example, if one expects the function to be smooth and the uncertainty to increase far from the data, cosine non-linearities and $L_2$ regularisation might be appropriate. The study of non-linearity--regularisation combinations and the corresponding predictive mean and variance are subject of current research. *{Acknowledgements} The authors would like to thank Dr Yutian Chen, Mr Christof Angermueller, Mr Roger Frigola, Mr Rowan McAllister, Dr Gabriel Synnaeve, Mr Mark van der Wilk, Mr Yan Wu, and many other reviewers for their helpful comments. Yarin Gal is supported by the Google European Fellowship in Machine Learning. %Prof Phil Blunsom, %%~",
    "equation": ""
  },
  {
    "section": "Appendix",
    "text": "The appendix for the paper is given at . [t!] {@{}l@{}r@{}r@{}r@{}r@{}r@{}r @{}} {c}{} & {c}{Avg. Test RMSE and Std. Errors} & {c}{Avg. Test LL and Std. Errors} \\\\ & %$N$ & $d$ & {l}{} & {c}{} & {l}{} & {l}{} & {c}{} & {c}{} \\\\ Boston Housing & %506 & 13 & 2.97 0.19 & 2.80 0.19 & 2.80 0.13 & -2.46 0.06 & -2.39 0.05 & -2.34 0.02 \\\\ Concrete Strength & %1030 & 8 & 5.23 0.12 & 4.81 0.14 & 4.50 0.18 & -3.04 0.02 & -2.94 0.02 & -2.82 0.02 \\\\ Energy Efficiency & %768 & 8 & 1.66 0.04 & 1.09 0.05 & 0.47 0.01 & -1.99 0.02 & -1.72 0.02 & -1.48 0.00 \\\\ Kin8nm & %8192 & 8 & 0.10 0.00 & 0.09 0.00 & 0.08 0.00 & 0.95 0.01 & 0.97 0.01 & 1.10 0.00 \\\\ Naval Propulsion & %11,934 & 16 & 0.01 0.00 & 0.00 0.00 & 0.00 0.00 & 3.80 0.01 & 3.92 0.01 & 4.32 0.00 \\\\ Power Plant & %9568 & 4 & 4.02 0.04 & 4.00 0.04 & 3.63 0.04 & -2.80 0.01 & -2.79 0.01 & -2.67 0.01 \\\\ Protein Structure & %45,730 & 9 & 4.36 0.01 & 4.27 0.01 & 3.62 0.01 & -2.89 0.00 & -2.87 0.00 & -2.70 0.00 \\\\ Wine Quality Red & %1599 & 11 & 0.62 0.01 & 0.61 0.01 & 0.60 0.01 & -0.93 0.01 & -0.92 0.01 & -0.90 0.01 \\\\ Yacht Hydrodynamics & %308 & 6 & 1.11 0.09 & 0.72 0.06 & 0.66 0.06 & -1.55 0.03 & -1.38 0.01 & -1.37 0.02 \\\\ %Year Prediction MSD & %515,345 & 90 & % 9.034 NA & 8.879 NA & & %-3.622 NA & -3.603 NA & \\\\ for dropout uncertainty as above (), the same model optimised with 10 times the number of epochs and identical model precision (), and the same model again with 2 layers instead of 1 ().} % % This document was modified from the file originally made available by % Pat Langley and Andrea Danyluk for ICML-2K. This version was % created by Lise Getoor and Tobias Scheffer, it was slightly modified % from the 2010 version by Thorsten Joachims & Johannes Fuernkranz, % slightly modified from the 2009 version by Kiri Wagstaff and % Sam Roweis's 2008 version, which is slightly modified from % Prasad Tadepalli's 2007 version which is a lightly % changed version of the previous year's version by Andrew Moore, % which was in turn edited from those of Kristian Kersting and % Codrina Lauth. Alex Smola contributed to the algorithmic style files.",
    "equation": ""
  }
]